<!DOCTYPE html>
<html>

<head>
    <title>Criar Sessão WPPConnect</title>
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700&display=swap" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #00c3ff 0%, #ffff1c 100%);
            font-family: 'Montserrat', Arial, sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
        }

        h1 {
            text-align: center;
            margin-top: 40px;
            color: #222;
            font-size: 2.5em;
            letter-spacing: 2px;
            text-shadow: 1px 1px 8px #fff9;
        }

        form {
            background: rgba(255, 255, 255, 0.95);
            max-width: 400px;
            margin: 30px auto 10px auto;
            padding: 30px 40px 20px 40px;
            border-radius: 18px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.18);
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        label {
            font-weight: 700;
            color: #333;
            margin-bottom: 6px;
        }

        select,
        input[type="text"] {
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #bbb;
            font-size: 1em;
            transition: border 0.2s;
        }

        select:focus,
        input[type="text"]:focus {
            border: 1.5px solid #00c3ff;
            outline: none;
        }

        button[type="submit"],
        #closeSessionBtn {
            background: linear-gradient(90deg, #00c3ff 0%, #ffff1c 100%);
            color: #222;
            font-weight: bold;
            border: none;
            border-radius: 8px;
            padding: 12px 0;
            font-size: 1.1em;
            cursor: pointer;
            box-shadow: 0 2px 8px #00c3ff44;
            transition: background 0.2s, transform 0.2s;
        }

        button[type="submit"]:hover,
        #closeSessionBtn:hover {
            background: linear-gradient(90deg, #ffff1c 0%, #00c3ff 100%);
            transform: scale(1.04);
        }

        #qrcode {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 30px auto 10px auto;
            min-height: 120px;
            max-width: 320px;
        }

        #qrcode img {
            border-radius: 12px;
            box-shadow: 0 4px 24px #00c3ff44;
            border: 2px solid #00c3ff;
            width: 220px;
            height: 220px;
            animation: pulse 1.2s infinite;
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 #00c3ff44;
            }

            70% {
                box-shadow: 0 0 24px 12px #00c3ff22;
            }

            100% {
                box-shadow: 0 0 0 0 #00c3ff44;
            }
        }

        #status {
            text-align: center;
            font-size: 1.2em;
            margin: 18px auto 0 auto;
            color: #222;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 8px;
            padding: 10px 0;
            max-width: 350px;
            box-shadow: 0 2px 8px #00c3ff22;
        }

        @media (max-width: 600px) {
            form {
                max-width: 95vw;
                padding: 18px 8vw 12px 8vw;
            }

            #qrcode img {
                width: 140px;
                height: 140px;
            }

            #status {
                font-size: 1em;
                max-width: 95vw;
            }
        }
    </style>
</head>

<body>
    <h1>✨ Criar Sessão WPPConnect ✨</h1>
    <form id="sessionForm">
        <label for="session_name">Nome da Sessão:</label>
        <select id="session_name" name="session_name" required>
            <% sessionNames.forEach(function(name) { %>
                <option value="<%= name %>">
                    <%= name %>
                </option>
                <% }); %>
                    <option value="__new__">Criar nova sessão...</option>
        </select>
        <input type="text" id="newSessionInput" name="new_session_name" placeholder="Novo nome da sessão"
            style="display:none;" />
        <button type="submit">Criar</button>
    </form>
    <button id="closeSessionBtn" style="display:none;">Encerrar Sessão</button>
    <div id="qrcode"></div>
    <div id="status"></div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const form = document.getElementById('sessionForm');
        const closeBtn = document.getElementById('closeSessionBtn');
        const qrcodeDiv = document.getElementById('qrcode');
        const statusDiv = document.getElementById('status');
        const select = document.getElementById('session_name');
        const newSessionInput = document.getElementById('newSessionInput');
        let socket;
        let sessionName;
        let qrTimer;

        select.addEventListener('change', function () {
            if (select.value === '__new__') {
                newSessionInput.style.display = 'inline-block';
                newSessionInput.required = true;
            } else {
                newSessionInput.style.display = 'none';
                newSessionInput.required = false;
            }
        });

        form.addEventListener('submit', function (e) {
            e.preventDefault();
            sessionName = select.value === '__new__' ? newSessionInput.value : select.value;

            form.querySelector('button[type="submit"]').disabled = true;

            socket = io();
            socket.emit('create-session', { sessionName });

            function startQrCountdown() {
                clearInterval(qrTimer);
                let timeLeft = 60;
                statusDiv.innerText = `Tempo restante para leitura do QR Code: ${timeLeft}s`;
                qrTimer = setInterval(() => {
                    timeLeft--;
                    statusDiv.innerText = `Tempo restante para leitura do QR Code: ${timeLeft}s`;
                    if (timeLeft <= 0) {
                        clearInterval(qrTimer);
                        statusDiv.innerText = 'QR Code expirado! Clique em "Criar" para gerar novamente.';
                        qrcodeDiv.innerHTML = '';
                        closeBtn.style.display = 'none';
                    }
                }, 1000);
            }

            socket.on('qrcode', function (qrCodeImg) {
                console.log(sessionName, ` | QR Code recebido para a sessão`);
                qrcodeDiv.innerHTML = `<img src="${qrCodeImg}" alt="QR Code">`;
                closeBtn.style.display = 'inline-block';
                startQrCountdown();
            });

            socket.on('status', function (status) {
                console.log(sessionName, ` | Status recebido:`, status);
                statusDiv.innerText = 'Status: ' + status;
                closeBtn.style.display = 'inline-block';
                form.querySelector('button[type="submit"]').disabled = false;
                if (
                    status === 'inChat' ||
                    status === 'autocloseCalled' ||
                    status === 'browserClose' ||
                    status === 'qrReadError'
                ) {
                    qrcodeDiv.innerHTML = '';
                    clearInterval(qrTimer);
                    if (
                        status === 'autocloseCalled' ||
                        status === 'browserClose' ||
                        status === 'qrReadError'
                    ) {
                        socket.disconnect();
                    }
                }
            });

            socket.on('message', function (message) {
                console.log(sessionName, ` | Mensagem recebida:`, message);

                const { body, type, from, sender } = message;
                const remetente = sender.shortName || sender.pushname || from;
                const isGroup = message.from.endsWith('@g.us') ? true : false;

                if (type === 'chat' && !isGroup) {
                    statusDiv.innerText = `Mensagem de ${remetente}: ${body}`;
                }
            });

            socket.on('error', function (data) {
                console.error(sessionName, ` | Erro recebido:`, data.error);
                statusDiv.innerText = 'Erro: ' + data.error;
                form.querySelector('button[type="submit"]').disabled = false;
                qrcodeDiv.innerHTML = '';
                closeBtn.style.display = 'none';
                clearInterval(qrTimer);
            });
        });

        closeBtn.addEventListener('click', function () {
            if (sessionName && socket) {
                socket.emit('close-session', { sessionName });
                qrcodeDiv.innerHTML = '';
                statusDiv.innerText = 'Sessão encerrada!';
                closeBtn.style.display = 'none';
                clearInterval(qrTimer);
            }
        });
    </script>
</body>

</html>